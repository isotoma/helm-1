{{- if .Values.global.db.bouncer }}
---
apiVersion: v1
kind: Service
metadata:
  name: {{ .Values.appName }}-service
  labels:
    environment: {{ .Release.Namespace }}
    app: {{ .Values.global.product }}
    tier: {{ .Values.appName}}
    service: {{ .Values.appName }}
spec:
  selector:
    environment: {{ .Release.Namespace }}
    service: {{ .Values.appName }}
    app: {{ .Values.global.product }}
  ports:
  - name: pgbouncer
    protocol: TCP
    port: 5432
    targetPort: 5432
---
apiVersion: apps/v1beta1
kind: Deployment
metadata:
  name: {{ .Values.appName }}-deployment
  labels:
    environment: {{ .Release.Namespace }}
    app: {{ .Values.global.product }}
    tier: {{ .Values.appName}}
    service: {{ .Values.appName }}
spec:
  strategy:
    type: RollingUpdate
  replicas: 1 # tells deployment to run 2 pods matching the template
  template: # create pods using pod definition in this template
    metadata:
      annotations:
        prometheus.io/path: /metrics
        prometheus.io/port: "9127"
        prometheus.io/scrape: "true"
      labels:
        environment: {{ .Release.Namespace }}
        app: {{ .Values.global.product }}
        tier: {{ .Values.appName}}
        service: {{ .Values.appName }}
    spec:
      containers:
        - name: {{ .Values.appName }}
          image: {{ .Values.image.registry }}/{{ .Values.global.repotype}}{{ .Values.image.repository }}:{{ .Values.image.tag }}
          env:

          {{- if eq .Values.global.secretalreadyexist true }}
            - name: DB_USER
              valueFrom:
                secretKeyRef:
                  name: secrets
                  key: postgres_dbuser
            - name: DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: secrets
                  key: postgres_dbpwd
            - name: STATS_USERS
              valueFrom:
                secretKeyRef:
                  name: secrets
                  key: postgres_dbuser
            - name: DB_HOST
            {{- if .Values.global.db.internal }}
              value: postgresql
            {{- else }}
              valueFrom:
                secretKeyRef:
                  name: secrets
                  key: postgres_dbhost
            {{- end }}
            {{- else}}
            - name: DB_HOST
            {{- if .Values.global.db.internal }}
              value: postgresql
             {{- else }}
              value: {{ .Values.global.db.dbhost }}
             {{- end }}
            - name: DB_USER
              value: {{ .Values.global.db.dbuser }}
            - name: DB_PASSWORD
              value: {{ .Values.global.db.dbpwd }}
            - name: STATS_USERS
              value: {{ .Values.global.db.dbuser }}
            {{- end }}
            - name: DB_NAME
              value: "*"
            - name: MAX_CLIENT_CONN
              value: {{ .Values.global.db.maxclientconn | quote }}
            - name: DEFAULT_POOL_SIZE
              value: {{ .Values.global.db.default_pool_size | quote }}
            - name: RESERVE_POOL_SIZE
              value: "200"
            - name: POOL_MODE
              value: {{ .Values.global.db.default_pool_mode }}
            - name: RESERVE_POOL_TIMEOUT
              value: "2"
            - name: SERVER_IDLE_TIMEOUT
              value: "15"
          ports:
          - containerPort: 5432
          resources:
            limits:
              cpu: 1000m
              memory: 500Mi
            requests:
              cpu: 100m
              memory: 350Mi
          readinessProbe:
            tcpSocket:
              port: 5432
            initialDelaySeconds: 5
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 3
          livenessProbe:
            tcpSocket:
              port: 5432
            initialDelaySeconds: 15
            periodSeconds: 30
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 3
        - name: pgbouncer-exporter
          image: spreaker/prometheus-pgbouncer-exporter
          env:
            - name: PGBOUNCER_EXPORTER_HOST
              value: 0.0.0.0
            - name: PGBOUNCER_EXPORTER_PORT
              value: "9127"
            - name: PGBOUNCER_HOST
              value: localhost
            - name: PGBOUNCER_PORT
              value: "5432"
            {{- if eq .Values.global.secretalreadyexist true }}
            - name: PGBOUNCER_USER
              valueFrom:
                secretKeyRef:
                  name: secrets
                  key: postgres_dbuser
            - name: PGBOUNCER_PASS
              valueFrom:
                secretKeyRef:
                  name: secrets
                  key: postgres_dbpwd
            {{- else}}
            - name: PGBOUNCER_USER
              value: {{ .Values.global.db.dbuser }}
            - name: PGBOUNCER_PASS
              value: {{ .Values.global.db.dbpwd }}
            {{- end }}
      {{- if not  (eq .Values.global.repotype "public") }}
      imagePullSecrets:
        - name: corezoid-secret
      {{- end }}
{{- end }}
