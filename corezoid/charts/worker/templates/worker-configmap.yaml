apiVersion: v1
data:
  worker.config: |
    [

       {corezoid_license_client, [
         {path_to_license, "/ebsmnt/certs/corezoid_license"}
       ]},

       {corezoid_global_stats, [
         {disabled, true}
       ]},

      %% for clustering components
      {corezoid_cluster, [
          {backend, redis}, %% maybe if future list will increase
          {redis, [
        {{- if eq .Values.global.redis.internal false }}
              {host, "${REDIS_HOST}"},
              {port, ${REDIS_PORT}},
              {password,"${REDIS_PASSWORD}"},
        {{- else }}
              {host, "redis-master"},
              {port, 6379},
              {password,""},
        {{- end }}
              {database, 10}
          ]}
      ]},

        {conf_agent, [
         {pgsql, [
          {{- if .Values.global.db.bouncer }}
            {host, "pgbouncer-service"},
          {{- else }}
            {host, "${POSTGRES_DBHOST}"},
          {{- end }}
           {user, "${POSTGRES_DBUSER}"},
           {dbname, "settings"},
           {password, "${POSTGRES_DBPWD}"},
           {min_size, 10},
           {max_size, 10},
           {start_size, 1}
         ]},

         {port, 8585},
         {is_admin, true},

        {publish_request, [
                    {servers, [
          {{- if eq .Values.global.mq.internal false }}
                  [
                    {host, "${MQ_HOST}"},
                    {port, ${MQ_PORT}},
                    {username, <<"${MQ_USERNAME}">>},
                    {password, <<"${MQ_PASSWORD}">>},
                    {vhost, <<"${MQ_VHOST}">>}
                ]
          {{- else }}
                  [
                    {host, "rabbit-service"},
                    {port, 5672},
                    {username, <<"${MQ_USERNAME}">>},
                    {password, <<"${MQ_PASSWORD}">>},
                    {vhost, <<"${MQ_VHOST}">>}
                ]
          {{- end }}
            ]},
        {queues_count, 1},
        {min_size, 1},
        {max_size, 1},
        {start_size, 1}
        ]},

        {consumer_response, [
            {servers, [
          {{- if eq .Values.global.mq.internal false }}
                  [
                    {host, "${MQ_HOST}"},
                    {port, ${MQ_PORT}},
                    {username, <<"${MQ_USERNAME}">>},
                    {password, <<"${MQ_PASSWORD}">>},
                    {vhost, <<"${MQ_VHOST}">>}
                ]
          {{- else }}
                  [
                    {host, "rabbit-service"},
                    {port, 5672},
                    {username, <<"${MQ_USERNAME}">>},
                    {password, <<"${MQ_PASSWORD}">>},
                    {vhost, <<"${MQ_VHOST}">>}
                ]
          {{- end }}
            ]},
        {connections_per_queue, 1},
        {channels_per_connection, 1},
        {messages_prefetch_size_per_channel, 50}
        ]}
        ]},

        %% dns cache. Support multiply dnses cache
        %% name - unical name will be able to use in publish/consumer rabbitmq instead of server name
        %% dns - DNS name
        %% ns - NS name
        %% ttl - auto reload info from DNS server (in seconds)

        {dns_cache, [
          {servers, [
          [
            {name, main},
          {{- if eq .Values.global.mq.internal false }}
            {dns, "${MQ_HOST}"},
          {{- else }}
            {dns, "rabbit-service"},
          {{- end }}
            {ttl, 60}
          ],
          [
            {name, name5},
          {{- if eq .Values.global.mq.internal false }}
            {dns, "${MQ_HOST}"},
          {{- else }}
            {dns, "rabbit-service"},
          {{- end }}
            {ttl, 60}
          ]
          ]}
        ]},

        {corezoid_queues_gc, [
          {disabled, false},
          {{- if eq .Values.global.mq.internal false }}
          {host, "${MQ_HOST}"},
          {port, 15672},
          {login, "${MQ_USERNAME}"},
          {password, "${MQ_PASSWORD}"},
          {{- else }}
          {host, "rabbit-service"},
          {port, 15672},
          {login, "${MQ_USERNAME}"},
          {password, "${MQ_PASSWORD}"},
          {{- end }}
          {vhost, "${MQ_VHOST}"},
          {gc_queues_regexp, ["api.ctrl", "settings"]}
        ]},

      {conv_params, [
          {min_version, 2} %% application should deny creating task (copy/rpc) if params are not valid
                           %% We have in database conveyor table conveyors field version. If version in DB >= min_version in config we run validator else ignore.
      ]},

      {enigma, [
        {is_enabled, {{ .Values.global.enigma.enabled }}},
        {private_key_id, "{{ .Values.global.worker.enigma_pk_id }}"},
        {key_manager_host, "http://enigma-key-manager-service:8080"},
        {rotors_pool, [
          {min_size, 3},
          {max_size, 50},
          {start_size, 3}
        ]}
      ]},


      { worker,
        [
        %% server id
        %% It's important to be unique
        { worker_id, <<"">> },

        {{- if .Values.global.enigma.encryption }}
        %% for ENCRYPT/DECRYPT data
        {encrypt_decrypt, [
           queue, %% now it's encode-decode RabbitMQ
           cache, %% Redis
           db     %% PostgreSQL
        ]},
        {{- end }}

        {nodes, [
          ''
        ]},

        %% max allowed task_size in bytes
        %% if you what increase this limit
        %% be careful, you'll do it at your own risk
        %% deprecated
        { max_task_size, 512000 },

        %% max task size for process conv
        {max_task_size_for_process_conv, 512000},

        %% max task size for state diagramm conv
        {max_task_size_for_st_diagramm_conv, 512000},

        %% sequence of shard numbers
        %% if you want to distribute the workload
        %% between several workers
        %% you can switch any part of this numbers to
        %% another application
        { shards, [{{- $lastIndex := sub (len .Values.global.db.shards) 1}}
          {{- range $i, $e := .Values.global.db.shards }}
          {{- $i }}{{- if ne $i $lastIndex -}}, {{ end }} {{- end }}] },

        %% shard's number
        %% it depends on the real shards number in DB
        %% or DB mappings in pgbouncer
        { shards_count, {{ .Values.global.db.shards_count | default 10 }} },

        %% swtich on\off timer logic execution on start worker app
        %% if "false" timers won't work
        { timer_auto_init, true },

        {type_storage, persistent}, %% persistent | memory

        %% this param needs to dynamically create public callback url in constructions:
        %% conv[ID].node[Node].public_callback_corezoid
        %% conv[ID].node[Node].public_callback_mandrill
        %% node[Node].public_callback_corezoid
        %% node[Node].public_callback_corezoid
        %% It should be in binary format
        {public_callback_prefix, <<"https://{{ .Values.global.subdomain }}.{{ .Values.global.domain }}">>},

        %% DB settings
        { pgsql,
          [
          {{- if .Values.global.db.bouncer }}
            { host, "pgbouncer-service" },
            { hosts, [
              { [{{- $lastIndex := sub (len .Values.global.db.shards) 1}}
          {{- range $i, $e := .Values.global.db.shards }}
          {{- $i }}{{- if ne $i $lastIndex -}}, {{ end }} {{- end }}], "pgbouncer-service" }
            ]},
          {{- else }}
            { host, "${POSTGRES_DBHOST}" },
            { hosts, [
              { [{{- $lastIndex := sub (len .Values.global.db.shards) 1}}
          {{- range $i, $e := .Values.global.db.shards }}
          {{- $i }}{{- if ne $i $lastIndex -}}, {{ end }} {{- end }}], "${POSTGRES_DBHOST}" }
            ]},
          {{- end }}
            { user, "${POSTGRES_DBUSER}" },
            { password, "${POSTGRES_DBPWD}" },
            { dbname, "conveyor" },
            { start_size, 2 },
            { min_size, 2 },
            { max_size, 5 }
          ]
        },

        % postgresql settings for statistics db
        {pgsql_statistics, [
          {{- if .Values.global.db.bouncer }}
          {host, "pgbouncer-service"},
          {{- else }}
          {host, "${POSTGRES_DBHOST}"},
          {{- end }}
          {user, "${POSTGRES_DBUSER}"},
          {password, "${POSTGRES_DBPWD}"},
          {dbname, "conveyor_statistics"},
          {min_size, 2},
          {max_size, 25},
          {start_size, 2}
        ]},

        {statistics, true},    % true|false for enable or disable statistic workers by default is true

        %%  postgresql archive db
        { pgsql_archive, [
          {{- if .Values.global.db.bouncer }}
            { hosts, [
              { [{{- $lastIndex := sub (len .Values.global.db.shards) 1}}
          {{- range $i, $e := .Values.global.db.shards }}
          {{- $i }}{{- if ne $i $lastIndex -}}, {{ end }} {{- end }}], "pgbouncer-service" }
            ]},
          {{- else }}
            { hosts, [
              { [{{- $lastIndex := sub (len .Values.global.db.shards) 1}}
          {{- range $i, $e := .Values.global.db.shards }}
          {{- $i }}{{- if ne $i $lastIndex -}}, {{ end }} {{- end }}], "${POSTGRES_DBHOST}" }
            ]},
          {{- end }}
            { user, "${POSTGRES_DBUSER}" },
            { password, "${POSTGRES_DBPWD}" },
            { start_size, 1 },
            { min_size, 1 },
            { max_size, 25 }
          ]},

        %% for custom db-s
        { pgsql2, [] },

        %% redis sentinel quorum hosts
        {sentinels, []},

        %% persistent storage for different counters
        %% please don't forget about backup of this data
        { redis, [
          [
          {{- if eq .Values.global.redis.internal false }}
            {host, "${REDIS_HOST}"},
            {port, ${REDIS_PORT}},
            {password,"${REDIS_PASSWORD}"},
          {{- else }}
            {host, "redis-master"},
            {port, 6379},
            {password,""},
          {{- end }}
            {database,1},
            {start_size, 5},
            {min_size, 5},
            {max_size, 200}
          ]
        ]},

        %% persistent storage for api_sum counters
        %% please don't forget about backup of this data
        { redis_api_sum, [
          [
          {{- if eq .Values.global.redis.internal false }}
            {host, "${REDIS_HOST}"},
            {port, ${REDIS_PORT}},
            {password,"${REDIS_PASSWORD}"},
          {{- else }}
            {host, "redis-master"},
            {port, 6379},
            {password,""},
          {{- end }}

            {database,2},
            {start_size, 5},
            {min_size, 5},
            {max_size, 200}
          ]
        ]},

        %% cache, nonpersistent storage, keys will expire after N hours
        { redis2, [
          [
          {{- if eq .Values.global.redis.internal false }}
            {host, "${REDIS_HOST}"},
            {port, ${REDIS_PORT}},
            {password,"${REDIS_PASSWORD}"},
          {{- else }}
            {host, "redis-master"},
            {port, 6379},
            {password,""},
          {{- end }}

            {database,3},
            {start_size, 5},
            {min_size, 5},
            {max_size, 400}
          ]
        ]},

        %% memory redis for timer calls
        %% these servers store timers in whole system
        {redis_timers, [
          [
          {{- if eq .Values.global.redis.internal false }}
            {host, "${REDIS_HOST}"},
            {port, ${REDIS_PORT}},
            {password,"${REDIS_PASSWORD}"},
          {{- else }}
            {host, "redis-master"},
            {port, 6379},
            {password,""},
          {{- end }}

            {database,4},
            {start_size, 5},
            {min_size, 5},
            {max_size, 100}
          ]
        ]},

        %% cache size in redis2
        {redis2_ttl, 43200},


        %%These section to publish tasks in rabbitmq
        {publish_unload_archive_task, [
                {servers, [
          {{- if eq .Values.global.mq.internal false }}
                      [
                        {host, "${MQ_HOST}"},
                        {port, ${MQ_PORT}},
                        {username, <<"${MQ_USERNAME}">>},
                        {password, <<"${MQ_PASSWORD}">>},
                        {vhost, <<"${MQ_VHOST}">>}
                    ]
          {{- else }}
                      [
                        {host, "rabbit-service"},
                        {port, 5672},
                        {username, <<"${MQ_USERNAME}">>},
                        {password, <<"${MQ_PASSWORD}">>},
                        {vhost, <<"${MQ_VHOST}">>}
                    ]
          {{- end }}
                ]},
          {min_size, 5},
          {max_size, 5},
          {start_size, 5}
        ]},

        %% These section to consume tasks in rabbitmq
        %% It's important to divide messages_prefetch_size_per_channel / workers without
        %% without a floating point.
        %% Examples: 500 / 10 - good
        %% 500 / 15 - bad.
        {consumer_unload_archive_task, [
                {servers, [
          {{- if eq .Values.global.mq.internal false }}
                      [
                        {host, "${MQ_HOST}"},
                        {port, ${MQ_PORT}},
                        {username, <<"${MQ_USERNAME}">>},
                        {password, <<"${MQ_PASSWORD}">>},
                        {vhost, <<"${MQ_VHOST}">>}
                    ]
          {{- else }}
                      [
                        {host, "rabbit-service"},
                        {port, 5672},
                        {username, <<"${MQ_USERNAME}">>},
                        {password, <<"${MQ_PASSWORD}">>},
                        {vhost, <<"${MQ_VHOST}">>}
                    ]
          {{- end }}
                ]},
          {connections_per_queue, 2},   %% The specified number of tcp connections will be created for each queue
          {channels_per_connection, 1},   %% Virtual connections for one connections_per_queue
          {messages_prefetch_size_per_channel, 1000},    %% The number of queues within the channel
          {workers, 20}
          %% connections_per_queue * channels_per_connection * messages_prefetch_size_per_channel % workers = batch size per worker
        ]},

        %% Logic copy task producer
        %% deprecated, producer of copy_task requests
        {publish_copy_task_request, [
                {servers, [
          {{- if eq .Values.global.mq.internal false }}
                      [
                        {host, "${MQ_HOST}"},
                        {port, ${MQ_PORT}},
                        {username, <<"${MQ_USERNAME}">>},
                        {password, <<"${MQ_PASSWORD}">>},
                        {vhost, <<"${MQ_VHOST}">>}
                    ]
          {{- else }}
                      [
                        {host, "rabbit-service"},
                        {port, 5672},
                        {username, <<"${MQ_USERNAME}">>},
                        {password, <<"${MQ_PASSWORD}">>},
                        {vhost, <<"${MQ_VHOST}">>}
                    ]
          {{- end }}
                ]},
          {queues_count, 1},
          {min_size, 1},
          {max_size, 5},
          {start_size, 1}
          %%{is_sharded, true} %% Legacy: will be removed
        ]},

        %% deprecated, consumer for responses of copy_tasks
        {consumer_copy_task_response, [
                {servers, [
          {{- if eq .Values.global.mq.internal false }}
                      [
                        {host, "${MQ_HOST}"},
                        {port, ${MQ_PORT}},
                        {username, <<"${MQ_USERNAME}">>},
                        {password, <<"${MQ_PASSWORD}">>},
                        {vhost, <<"${MQ_VHOST}">>}
                    ]
          {{- else }}
                      [
                        {host, "rabbit-service"},
                        {port, 5672},
                        {username, <<"${MQ_USERNAME}">>},
                        {password, <<"${MQ_PASSWORD}">>},
                        {vhost, <<"${MQ_VHOST}">>}
                    ]
          {{- end }}
                ]},
          {connections_per_queue, 1},   %% The specified number of tcp connections will be created for each queue
          {channels_per_connection, 1},   %% Virtual connections for one connections_per_queue
          {messages_prefetch_size_per_channel, 20}    %% The number of queues within the channel
        ]},

        %% producer of timer requests
        {publish_timer_request, [
                {servers, [
          {{- if eq .Values.global.mq.internal false }}
                      [
                        {host, "${MQ_HOST}"},
                        {port, ${MQ_PORT}},
                        {username, <<"${MQ_USERNAME}">>},
                        {password, <<"${MQ_PASSWORD}">>},
                        {vhost, <<"${MQ_VHOST}">>}
                    ]
          {{- else }}
                      [
                        {host, "rabbit-service"},
                        {port, 5672},
                        {username, <<"${MQ_USERNAME}">>},
                        {password, <<"${MQ_PASSWORD}">>},
                        {vhost, <<"${MQ_VHOST}">>}
                    ]
          {{- end }}
                ]},
          {min_size, 1},
          {max_size, 1},
          {start_size, 1}
        ]},

        %% consumer for timer responses
        {consumer_timer_response, [
                {servers, [
          {{- if eq .Values.global.mq.internal false }}
                      [
                        {host, "${MQ_HOST}"},
                        {port, ${MQ_PORT}},
                        {username, <<"${MQ_USERNAME}">>},
                        {password, <<"${MQ_PASSWORD}">>},
                        {vhost, <<"${MQ_VHOST}">>}
                    ]
          {{- else }}
                      [
                        {host, "rabbit-service"},
                        {port, 5672},
                        {username, <<"${MQ_USERNAME}">>},
                        {password, <<"${MQ_PASSWORD}">>},
                        {vhost, <<"${MQ_VHOST}">>}
                    ]
          {{- end }}
                ]},
          {connections_per_queue, 1},   %% The specified number of tcp connections will be created for each queue
          {channels_per_connection, 1},   %% Virtual connections for one connections_per_queue
          {messages_prefetch_size_per_channel, 20}    %% The number of queues within the channel
        ]},

        %% producer of http reqeuests, API logic
        {publish_http_request, [
                {servers, [
          {{- if eq .Values.global.mq.internal false }}
                      [
                        {host, "${MQ_HOST}"},
                        {port, ${MQ_PORT}},
                        {username, <<"${MQ_USERNAME}">>},
                        {password, <<"${MQ_PASSWORD}">>},
                        {vhost, <<"${MQ_VHOST}">>}
                    ]
          {{- else }}
                      [
                        {host, "rabbit-service"},
                        {port, 5672},
                        {username, <<"${MQ_USERNAME}">>},
                        {password, <<"${MQ_PASSWORD}">>},
                        {vhost, <<"${MQ_VHOST}">>}
                    ]
          {{- end }}
                ]},
          {queues_count, 1},
          {min_size, 5},
          {max_size, 5},
          {start_size, 5}
        ]},

        %% consumer for http responses, API logic
        {consumer_http_response, [
                {servers, [
          {{- if eq .Values.global.mq.internal false }}
                      [
                        {host, "${MQ_HOST}"},
                        {port, ${MQ_PORT}},
                        {username, <<"${MQ_USERNAME}">>},
                        {password, <<"${MQ_PASSWORD}">>},
                        {vhost, <<"${MQ_VHOST}">>}
                    ]
          {{- else }}
                      [
                        {host, "rabbit-service"},
                        {port, 5672},
                        {username, <<"${MQ_USERNAME}">>},
                        {password, <<"${MQ_PASSWORD}">>},
                        {vhost, <<"${MQ_VHOST}">>}
                    ]
          {{- end }}
                ]},
          {connections_per_queue, 2},   %% The specified number of tcp connections will be created for each queue
          {channels_per_connection, 1},   %% Virtual connections for one connections_per_queue
          {messages_prefetch_size_per_channel, 20}    %% The number of queues within the channel
        ]},

        %% Logic call process
        %% producer of rpc requests, RPC logic
        {publish_rpc_request, [
                {servers, [
          {{- if eq .Values.global.mq.internal false }}
                      [
                        {host, "${MQ_HOST}"},
                        {port, ${MQ_PORT}},
                        {username, <<"${MQ_USERNAME}">>},
                        {password, <<"${MQ_PASSWORD}">>},
                        {vhost, <<"${MQ_VHOST}">>}
                    ]
          {{- else }}
                      [
                        {host, "rabbit-service"},
                        {port, 5672},
                        {username, <<"${MQ_USERNAME}">>},
                        {password, <<"${MQ_PASSWORD}">>},
                        {vhost, <<"${MQ_VHOST}">>}
                    ]
          {{- end }}
                ]},
          {queues_count, 1},
          {min_size, 5},
          {max_size, 5},
          {start_size, 5},
          {is_sharded, true}   %% Legacy: will be removed
        ]},

        %% consumer for rpc responses, RPC logic
        {consumer_rpc_response, [
                {servers, [
          {{- if eq .Values.global.mq.internal false }}
                      [
                        {host, "${MQ_HOST}"},
                        {port, ${MQ_PORT}},
                        {username, <<"${MQ_USERNAME}">>},
                        {password, <<"${MQ_PASSWORD}">>},
                        {vhost, <<"${MQ_VHOST}">>}
                    ]
          {{- else }}
                      [
                        {host, "rabbit-service"},
                        {port, 5672},
                        {username, <<"${MQ_USERNAME}">>},
                        {password, <<"${MQ_PASSWORD}">>},
                        {vhost, <<"${MQ_VHOST}">>}
                    ]
          {{- end }}
                ]},
          {connections_per_queue, 2},   %% The specified number of tcp connections will be created for each queue
          {channels_per_connection, 1},   %% Virtual connections for one connections_per_queue
          {messages_prefetch_size_per_channel, 20}    %% The number of queues within the channel
        ]},

        %% logic usercode
        %% producer of usercode requests, CODE logic
        {publish_cce_request, [
                {servers, [
          {{- if eq .Values.global.mq.internal false }}
                      [
                        {host, "${MQ_HOST}"},
                        {port, ${MQ_PORT}},
                        {username, <<"${MQ_USERNAME}">>},
                        {password, <<"${MQ_PASSWORD}">>},
                        {vhost, <<"${MQ_VHOST}">>}
                    ]
          {{- else }}
                      [
                        {host, "rabbit-service"},
                        {port, 5672},
                        {username, <<"${MQ_USERNAME}">>},
                        {password, <<"${MQ_PASSWORD}">>},
                        {vhost, <<"${MQ_VHOST}">>}
                    ]
          {{- end }}
                ]},
          {queues_count, 4},
          {min_size, 5},
          {max_size, 5},
          {start_size, 5}
        ]},

        %% consumer for usercode responses, CODE logic
        {consumer_cce_response, [
                {servers, [
          {{- if eq .Values.global.mq.internal false }}
                      [
                        {host, "${MQ_HOST}"},
                        {port, ${MQ_PORT}},
                        {username, <<"${MQ_USERNAME}">>},
                        {password, <<"${MQ_PASSWORD}">>},
                        {vhost, <<"${MQ_VHOST}">>}
                    ]
          {{- else }}
                      [
                        {host, "rabbit-service"},
                        {port, 5672},
                        {username, <<"${MQ_USERNAME}">>},
                        {password, <<"${MQ_PASSWORD}">>},
                        {vhost, <<"${MQ_VHOST}">>}
                    ]
          {{- end }}
                ]},
          {connections_per_queue, 2},   %% The specified number of tcp connections will be created for each queue
          {channels_per_connection, 1},   %% Virtual connections for one connections_per_queue
          {messages_prefetch_size_per_channel, 20}    %% The number of queues within the channel
        ]},

        %% logic db call
        %% producer
        {publish_db_call_request, [
                {servers, [
          {{- if eq .Values.global.mq.internal false }}
                      [
                        {host, "${MQ_HOST}"},
                        {port, ${MQ_PORT}},
                        {username, <<"${MQ_USERNAME}">>},
                        {password, <<"${MQ_PASSWORD}">>},
                        {vhost, <<"${MQ_VHOST}">>}
                    ]
          {{- else }}
                      [
                        {host, "rabbit-service"},
                        {port, 5672},
                        {username, <<"${MQ_USERNAME}">>},
                        {password, <<"${MQ_PASSWORD}">>},
                        {vhost, <<"${MQ_VHOST}">>}
                    ]
          {{- end }}
                ]},
          {min_size, 1},
          {max_size, 1},
          {start_size, 1}
        ]},


        %% consumer
        {consumer_db_call_response, [
                {servers, [
          {{- if eq .Values.global.mq.internal false }}
                      [
                        {host, "${MQ_HOST}"},
                        {port, ${MQ_PORT}},
                        {username, <<"${MQ_USERNAME}">>},
                        {password, <<"${MQ_PASSWORD}">>},
                        {vhost, <<"${MQ_VHOST}">>}
                    ]
          {{- else }}
                      [
                        {host, "rabbit-service"},
                        {port, 5672},
                        {username, <<"${MQ_USERNAME}">>},
                        {password, <<"${MQ_PASSWORD}">>},
                        {vhost, <<"${MQ_VHOST}">>}
                    ]
          {{- end }}
                ]},
          {queues_count, 10},
          {connections_per_queue, 1},
          {channels_per_connection, 1},
          {messages_prefetch_size_per_channel, 50}
        ]},


        %% logic get task
        %% producer of get_task requests, QUEUE logic
        {publish_get_task_request, [
                {servers, [
          {{- if eq .Values.global.mq.internal false }}
                      [
                        {host, "${MQ_HOST}"},
                        {port, ${MQ_PORT}},
                        {username, <<"${MQ_USERNAME}">>},
                        {password, <<"${MQ_PASSWORD}">>},
                        {vhost, <<"${MQ_VHOST}">>}
                    ]
          {{- else }}
                      [
                        {host, "rabbit-service"},
                        {port, 5672},
                        {username, <<"${MQ_USERNAME}">>},
                        {password, <<"${MQ_PASSWORD}">>},
                        {vhost, <<"${MQ_VHOST}">>}
                    ]
          {{- end }}
                ]},
          {queues_count, 1},
          {min_size, 3},
          {max_size, 3},
          {start_size, 3}
        ]},

        %% consumer for get_task requests, QUEUE logic
        {consumer_get_task_response, [
                {servers, [
          {{- if eq .Values.global.mq.internal false }}
                      [
                        {host, "${MQ_HOST}"},
                        {port, ${MQ_PORT}},
                        {username, <<"${MQ_USERNAME}">>},
                        {password, <<"${MQ_PASSWORD}">>},
                        {vhost, <<"${MQ_VHOST}">>}
                    ]
          {{- else }}
                      [
                        {host, "rabbit-service"},
                        {port, 5672},
                        {username, <<"${MQ_USERNAME}">>},
                        {password, <<"${MQ_PASSWORD}">>},
                        {vhost, <<"${MQ_VHOST}">>}
                    ]
          {{- end }}
                ]},
          {connections_per_queue, 2},   %% The specified number of tcp connections will be created for each queue
          {channels_per_connection, 1},   %% Virtual connections for one connections_per_queue
          {messages_prefetch_size_per_channel, 20}    %% The number of queues within the channel
        ]},

        %% logic modify task
        %% producer of modify requests, QUEUE logic
        {publish_modify_request, [
                {servers, [
          {{- if eq .Values.global.mq.internal false }}
                      [
                        {host, "${MQ_HOST}"},
                        {port, ${MQ_PORT}},
                        {username, <<"${MQ_USERNAME}">>},
                        {password, <<"${MQ_PASSWORD}">>},
                        {vhost, <<"${MQ_VHOST}">>}
                    ]
          {{- else }}
                      [
                        {host, "rabbit-service"},
                        {port, 5672},
                        {username, <<"${MQ_USERNAME}">>},
                        {password, <<"${MQ_PASSWORD}">>},
                        {vhost, <<"${MQ_VHOST}">>}
                    ]
          {{- end }}
                ]},
          {min_size, 5},
          {max_size, 5},
          {start_size, 5}
        ]},

        %% settings queue
        %% This queue need to communicate between corezoid
        %% components. Api, http_worker, worker, cce, ... communicate
        %% through settings queue
        {publish_settings, [
                {servers, [
          {{- if eq .Values.global.mq.internal false }}
                      [
                        {host, "${MQ_HOST}"},
                        {port, ${MQ_PORT}},
                        {username, <<"${MQ_USERNAME}">>},
                        {password, <<"${MQ_PASSWORD}">>},
                        {vhost, <<"${MQ_VHOST}">>}
                    ]
          {{- else }}
                      [
                        {host, "rabbit-service"},
                        {port, 5672},
                        {username, <<"${MQ_USERNAME}">>},
                        {password, <<"${MQ_PASSWORD}">>},
                        {vhost, <<"${MQ_VHOST}">>}
                    ]
          {{- end }}
                ]},
          {min_size, 2},
          {max_size, 2},
          {start_size, 2}
        ]},

        %% consumer for settings
        %% this messages inform app-s about changes in a structure of processes,
        %% users, rights etc...
        {consumer_settings, [
                {servers, [
          {{- if eq .Values.global.mq.internal false }}
                      [
                        {host, "${MQ_HOST}"},
                        {port, ${MQ_PORT}},
                        {username, <<"${MQ_USERNAME}">>},
                        {password, <<"${MQ_PASSWORD}">>},
                        {vhost, <<"${MQ_VHOST}">>}
                    ]
          {{- else }}
                      [
                        {host, "rabbit-service"},
                        {port, 5672},
                        {username, <<"${MQ_USERNAME}">>},
                        {password, <<"${MQ_PASSWORD}">>},
                        {vhost, <<"${MQ_VHOST}">>}
                    ]
          {{- end }}
                ]},
          {connections_per_queue, 1},   %% The specified number of tcp connections will be created for each queue
          {channels_per_connection, 1},   %% Virtual connections for one connections_per_queue
          {messages_prefetch_size_per_channel, 20}    %% The number of queues within the channel
        ]},

        %% interconnect cluster workers
        %% each node have to be able to connect with another nodes using interconnect.interface and interconnect.listen.port options
        {interconnect, [
          {name, workers},
          {id, <<"worker-{{ .Values.global.subdomain }}.{{ .Values.global.domain }}">>},    %% should be the same as "worker_id"
          {interface, "eth0"}, %% IP from this interface will be used for sending the first packet in the beginning of communication
          {password, <<"Igu1poh2eimeChahca">>}, %% should be the same on each node in this cluster that uses the same interconnect.name
          {listen, [
            {port, 5555},   %% port for internode communication in cluster
            {transport, tcp}, %% allowed values "tcp | ssl (need cert file)"
            %{opts, [{certfile, "/ebsmnt/conf/cp-self-signed.pem"}]}, %% uncomment this option to enable TLS encryption
            {max_connections, 1024} %% max connections from all nodes to this one -> sender.max_size * nodes count in this cluster
          ]},
          %% threads count between workers in the cluster
          {sender, [
            {start_size, 1},
            {min_size, 1},
            {max_size, 100}
          ]}
        ]},

        %% produce messages for all "to_worker" queues
        %% from requests that are coming through API
        %% user's requests on API, requests from user's interface
        {publish_to_worker_request, [
          {servers, [
          {{- if eq .Values.global.mq.internal false }}
            { [{{- $lastIndex := sub (len .Values.global.db.shards) 1}}
          {{- range $i, $e := .Values.global.db.shards }}
          {{- $i }}{{- if ne $i $lastIndex -}}, {{ end }} {{- end }}] , [[
              {host, "${MQ_HOST}"}
            ]]}
          ]},
          {port, ${MQ_PORT}},
          {username, <<"${MQ_USERNAME}">>},
          {password, <<"${MQ_PASSWORD}">>},
          {{- else }}
                { [{{- $lastIndex := sub (len .Values.global.db.shards) 1}}
          {{- range $i, $e := .Values.global.db.shards }}
          {{- $i }}{{- if ne $i $lastIndex -}}, {{ end }} {{- end }}] , [[
              {host, "rabbit-service"}
            ]]}
          ]},
          {port, 5672},
          {username, <<"${MQ_USERNAME}">>},
          {password, <<"${MQ_PASSWORD}">>},
          {{- end }}
          {vhost, <<"${MQ_VHOST}">>},
          {min_size, 5},
          {max_size, 5},
          {start_size, 5}
        ]},

        %% consumer for to_worker
        {consumer_shard_response, [
                {servers, [
          {{- if eq .Values.global.mq.internal false }}
                      [
                        {host, "${MQ_HOST}"},
                        {port, ${MQ_PORT}},
                        {username, <<"${MQ_USERNAME}">>},
                        {password, <<"${MQ_PASSWORD}">>},
                        {vhost, <<"${MQ_VHOST}">>}
                    ]
          {{- else }}
                      [
                        {host, "rabbit-service"},
                        {port, 5672},
                        {username, <<"${MQ_USERNAME}">>},
                        {password, <<"${MQ_PASSWORD}">>},
                        {vhost, <<"${MQ_VHOST}">>}
                    ]
          {{- end }}
                ]},
          {connections_per_queue, 2},   %% The specified number of tcp connections will be created for each queue
          {channels_per_connection, 1},   %% Virtual connections for one connections_per_queue
          {messages_prefetch_size_per_channel, 50}    %% The number of queues within the channel
        ]},

        %% logic git call
        %% producer
        {publish_git_call_request, [
                {servers, [
          {{- if eq .Values.global.mq.internal false }}
                      [
                        {host, "${MQ_HOST}"},
                        {port, ${MQ_PORT}},
                        {username, <<"${MQ_USERNAME}">>},
                        {password, <<"${MQ_PASSWORD}">>},
                        {vhost, <<"${MQ_VHOST}">>}
                    ]
          {{- else }}
                      [
                        {host, "rabbit-service"},
                        {port, 5672},
                        {username, <<"${MQ_USERNAME}">>},
                        {password, <<"${MQ_PASSWORD}">>},
                        {vhost, <<"${MQ_VHOST}">>}
                    ]
          {{- end }}
                ]},
          {queues_count, 1},
          {min_size, 1},
          {max_size, 1},
          {start_size, 1}
        ]},

        %% concierge answers git_call
        {consumer_git_call_response, [
                {servers, [
          {{- if eq .Values.global.mq.internal false }}
                      [
                        {host, "${MQ_HOST}"},
                        {port, ${MQ_PORT}},
                        {username, <<"${MQ_USERNAME}">>},
                        {password, <<"${MQ_PASSWORD}">>},
                        {vhost, <<"${MQ_VHOST}">>}
                    ]
          {{- else }}
                      [
                        {host, "rabbit-service"},
                        {port, 5672},
                        {username, <<"${MQ_USERNAME}">>},
                        {password, <<"${MQ_PASSWORD}">>},
                        {vhost, <<"${MQ_VHOST}">>}
                    ]
          {{- end }}
                ]},
          {queues_count, 10},
          {connections_per_queue, 1},   %% The specified number of tcp connections will be created for each queue
          {channels_per_connection, 1},   %% Virtual connections for one connections_per_queue
          {messages_prefetch_size_per_channel, 1}    %% The number of queues within the channel
        ]}

      ]},
      %% Billing
        %% If you don't use billing or don't want to store any information
        %% about how to consume corezoid by users set up empty
        %% examples: {billing , []}
        %% Or create conv and put id to new_billing_conv_id section
        {billing, []},
        {lager, [
          %% What handlers to install with what arguments (wrapped by middleman)

          {log_root, "/ebsmnt/erlang/worker/log"},

          {handlers, [
            {lager_console_backend, info},
            {lager_file_backend, [{file, "error.log"}, {level, error}, {size, 734003200}, {date, "$D0"}, {count, 1}]},
            {lager_file_backend, [{file, "console.log"}, {level, info}, {size, 734003200}, {date, "$D0"}, {count, 1}]},
            {lager_file_backend, [{file, "debug.log"}, {level, debug}, {size, 734003200}, {date, "$D0"}, {count, 1}]}

          ]},

          %% What colors to use with what log levels
          {colored, true},
          {colors, [
            {debug,     "\e[0;38m" },
            {info,      "\e[1;37m" },
            {notice,    "\e[1;36m" },
            {warning,   "\e[1;33m" },
            {error,     "\e[1;31m" },
            {critical,  "\e[1;35m" },
            {alert,     "\e[1;44m" },
            {emergency, "\e[1;41m" }

          ]},

          %% Whether to write a crash log, and where. Undefined means no crash logger.
          {crash_log, "crash.log"},
          %% Maximum size in bytes of events in the crash log - defaults to 65536
          {crash_log_msg_size, 65536},
          %% Maximum size of the crash log in bytes, before its rotated, set
          %% to 0 to disable rotation - default is 0
          {crash_log_size, 734003200},
          %% What time to rotate the crash log - default is no time
          %% rotation. See the README for a description of this format.
          {crash_log_date, "$D0"},
          %% Number of rotated crash logs to keep, 0 means keep only the
          %% current one - default is 0
          {crash_log_count, 1},
          %% Whether to redirect error_logger messages into lager - defaults to true
          {error_logger_redirect, true},
          %% How many messages per second to allow from error_logger before we start dropping them
          {error_logger_hwm, 50},
          %% How big the gen_event mailbox can get before it is switched into sync mode
          {async_threshold, 20},
          %% Switch back to async mode, when gen_event mailbox size decrease from 'async_threshold'
          %% to async_threshold - async_threshold_window
          {async_threshold_window, 5}
        ]
      },

      %% Client for healthcheck server
      {hcheck_sender, [
        {host, <<"hcs-service">>}, %% host of the remote healthcheck server
        {port, 5011}, %% port of the remote healthcheck server
        {node_name,  <<"worker-{{ .Values.global.subdomain }}.{{ .Values.global.domain }}">> }, %% different for each node
        {node_type,  <<"worker">> }, %% api | worker | multipart | http_worker | usercode | deepmemo ...
        {disabled, true}, %% true by default
        {send_interval_sec, 30}, %% by default 10 sec
        {send_system_counters, true} %% memory processes etc, false by default
      ]},

      {sasl, [{sasl_error_logger, false}]}
    ].


kind: ConfigMap
metadata:
  name: {{ .Values.appName }}-config
